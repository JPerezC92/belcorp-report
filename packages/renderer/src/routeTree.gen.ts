/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WeeklyReportRouteImport } from './routes/weekly-report'
import { Route as WarRoomsRouteImport } from './routes/war-rooms'
import { Route as TaggingV3RouteImport } from './routes/tagging-v3'
import { Route as MonthlyReportStatusSettingsRouteImport } from './routes/monthly-report-status-settings'
import { Route as ModuleCategorizationDisplaySettingsRouteImport } from './routes/module-categorization-display-settings'
import { Route as BusinessUnitSettingsRouteImport } from './routes/business-unit-settings'
import { Route as IndexRouteImport } from './routes/index'

const WeeklyReportRoute = WeeklyReportRouteImport.update({
  id: '/weekly-report',
  path: '/weekly-report',
  getParentRoute: () => rootRouteImport,
} as any)
const WarRoomsRoute = WarRoomsRouteImport.update({
  id: '/war-rooms',
  path: '/war-rooms',
  getParentRoute: () => rootRouteImport,
} as any)
const TaggingV3Route = TaggingV3RouteImport.update({
  id: '/tagging-v3',
  path: '/tagging-v3',
  getParentRoute: () => rootRouteImport,
} as any)
const MonthlyReportStatusSettingsRoute =
  MonthlyReportStatusSettingsRouteImport.update({
    id: '/monthly-report-status-settings',
    path: '/monthly-report-status-settings',
    getParentRoute: () => rootRouteImport,
  } as any)
const ModuleCategorizationDisplaySettingsRoute =
  ModuleCategorizationDisplaySettingsRouteImport.update({
    id: '/module-categorization-display-settings',
    path: '/module-categorization-display-settings',
    getParentRoute: () => rootRouteImport,
  } as any)
const BusinessUnitSettingsRoute = BusinessUnitSettingsRouteImport.update({
  id: '/business-unit-settings',
  path: '/business-unit-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/business-unit-settings': typeof BusinessUnitSettingsRoute
  '/module-categorization-display-settings': typeof ModuleCategorizationDisplaySettingsRoute
  '/monthly-report-status-settings': typeof MonthlyReportStatusSettingsRoute
  '/tagging-v3': typeof TaggingV3Route
  '/war-rooms': typeof WarRoomsRoute
  '/weekly-report': typeof WeeklyReportRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/business-unit-settings': typeof BusinessUnitSettingsRoute
  '/module-categorization-display-settings': typeof ModuleCategorizationDisplaySettingsRoute
  '/monthly-report-status-settings': typeof MonthlyReportStatusSettingsRoute
  '/tagging-v3': typeof TaggingV3Route
  '/war-rooms': typeof WarRoomsRoute
  '/weekly-report': typeof WeeklyReportRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/business-unit-settings': typeof BusinessUnitSettingsRoute
  '/module-categorization-display-settings': typeof ModuleCategorizationDisplaySettingsRoute
  '/monthly-report-status-settings': typeof MonthlyReportStatusSettingsRoute
  '/tagging-v3': typeof TaggingV3Route
  '/war-rooms': typeof WarRoomsRoute
  '/weekly-report': typeof WeeklyReportRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/business-unit-settings'
    | '/module-categorization-display-settings'
    | '/monthly-report-status-settings'
    | '/tagging-v3'
    | '/war-rooms'
    | '/weekly-report'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/business-unit-settings'
    | '/module-categorization-display-settings'
    | '/monthly-report-status-settings'
    | '/tagging-v3'
    | '/war-rooms'
    | '/weekly-report'
  id:
    | '__root__'
    | '/'
    | '/business-unit-settings'
    | '/module-categorization-display-settings'
    | '/monthly-report-status-settings'
    | '/tagging-v3'
    | '/war-rooms'
    | '/weekly-report'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BusinessUnitSettingsRoute: typeof BusinessUnitSettingsRoute
  ModuleCategorizationDisplaySettingsRoute: typeof ModuleCategorizationDisplaySettingsRoute
  MonthlyReportStatusSettingsRoute: typeof MonthlyReportStatusSettingsRoute
  TaggingV3Route: typeof TaggingV3Route
  WarRoomsRoute: typeof WarRoomsRoute
  WeeklyReportRoute: typeof WeeklyReportRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/weekly-report': {
      id: '/weekly-report'
      path: '/weekly-report'
      fullPath: '/weekly-report'
      preLoaderRoute: typeof WeeklyReportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/war-rooms': {
      id: '/war-rooms'
      path: '/war-rooms'
      fullPath: '/war-rooms'
      preLoaderRoute: typeof WarRoomsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tagging-v3': {
      id: '/tagging-v3'
      path: '/tagging-v3'
      fullPath: '/tagging-v3'
      preLoaderRoute: typeof TaggingV3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monthly-report-status-settings': {
      id: '/monthly-report-status-settings'
      path: '/monthly-report-status-settings'
      fullPath: '/monthly-report-status-settings'
      preLoaderRoute: typeof MonthlyReportStatusSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/module-categorization-display-settings': {
      id: '/module-categorization-display-settings'
      path: '/module-categorization-display-settings'
      fullPath: '/module-categorization-display-settings'
      preLoaderRoute: typeof ModuleCategorizationDisplaySettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/business-unit-settings': {
      id: '/business-unit-settings'
      path: '/business-unit-settings'
      fullPath: '/business-unit-settings'
      preLoaderRoute: typeof BusinessUnitSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BusinessUnitSettingsRoute: BusinessUnitSettingsRoute,
  ModuleCategorizationDisplaySettingsRoute:
    ModuleCategorizationDisplaySettingsRoute,
  MonthlyReportStatusSettingsRoute: MonthlyReportStatusSettingsRoute,
  TaggingV3Route: TaggingV3Route,
  WarRoomsRoute: WarRoomsRoute,
  WeeklyReportRoute: WeeklyReportRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
